from jose import jwt
from datetime import datetime, timedelta
from fastapi import HTTPException
from dotenv import load_dotenv
import os

from ..models.Credentials import Credentials

load_dotenv()


def authenticate_user(username: str, password: str):
    """
    The function `authenticate_user` checks if the provided username and password match the hard-coded
    default values.
    
    :param username: A string representing the username of the user trying to authenticate
    :type username: str
    :param password: The password parameter is a string that represents the password entered by the user
    :type password: str
    :return: a boolean value. It returns True if the provided username and password match the hard-coded
    values, and False otherwise.
    """
    # Hard-coded username and password
    if username == os.getenv("AUTH_USER") and password == os.getenv("AUTH_PASS"):
        return True
    return False


def create_access_token(data: dict):
    """
    The function `create_access_token` generates an access token by encoding the provided data
    dictionary using a secret key and specified algorithm.
    
    :param data: A dictionary containing the data that you want to include in the access token. This can
    be any information that you want to associate with the token, such as user ID, role, or any other
    relevant data
    :type data: dict
    :return: an encoded JWT (JSON Web Token).
    """
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(
        minutes=int(os.getenv("TOKEN_EXPIRES"))
    )
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(
        to_encode, os.getenv("SECRET_KEY"), algorithm=os.getenv("ALGORITHM")
    )
    return encoded_jwt


def auth(credentials: Credentials):
    """
    The `auth` function authenticates a user using their credentials and returns an access token if
    successful.
    
    :param credentials: The `credentials` parameter is of type `Credentials`. It is an object that
    contains the user's username and password
    :type credentials: Credentials
    :return: a dictionary with two keys: "access_token" and "token_type". The value of "access_token" is
    the access token generated by the function create_access_token, and the value of "token_type" is
    "bearer".
    """
    user = authenticate_user(credentials.user, credentials.password)
    if not user:
        raise HTTPException(
            status_code=401,
            detail="Incorrect username or password",
        )

    access_token = create_access_token(data={"sub": credentials.user})
    return {"access_token": access_token, "token_type": "bearer"}


def verify_jwt(token: str):
    """
    The function `verify_jwt` decodes a JWT token using a secret key and algorithm, and raises an
    exception if the token is invalid.
    
    :param token: The `token` parameter is a string that represents a JSON Web Token (JWT)
    :type token: str
    :return: nothing.
    """
    try:
        token = jwt.decode(
            token.split(" ")[1],
            os.getenv("SECRET_KEY"),
            algorithms=[os.getenv("ALGORITHM")],
        )
        return

    except:
        raise HTTPException(
            status_code=401,
            detail="Invalid authentication credentials",
        )
